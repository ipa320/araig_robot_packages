<launch>   
<!-- param -->
    <rosparam command="load" file="$(find turtlebot3_sim_tests)/config/test1_emergency.yaml" />

<!-- test runner -->
    <node pkg="araig_test_runners" type="test_1_emergency" name="test_1_runner_node" output="screen">
    </node>

<!-- interpreters -->
    <node pkg="araig_interpreters" type="velocity_interpreter" name="velocity_interpreter_node" output="screen">
        <remap from="/start" to="/signal/runner/start_robot"/>
        <remap from="/velocity" to="/cmd_vel"/>    
    </node>

<!-- calculators -->
    <!-- get speed from /odom -->
    <node name="focus_odom_x" pkg="topic_tools" type="transform" args="/odom /data/robot/odom/twist/linear_x std_msgs/Float64 'm.twist.twist.linear.x'" />
    
    <!-- ONLY for TEST use /odom as the location of robot -->
    <node name="focus_pose" pkg="topic_tools" type="transform" args="/odom /data/interpreter/location/robot geometry_msgs/PoseStamped 
    'geometry_msgs.msg.PoseStamped(header=std_msgs.msg.Header(seq=m.header.seq,stamp=m.header.stamp),pose=m.pose.pose)' --import geometry_msgs std_msgs" />
    
    <!-- pub emergency signal -->
    <node pkg="rostopic" type="rostopic" name="emergency_node" args="pub /emergency_stop_state cob_msgs/EmergencyStopState
    '{emergency_button_stop: false,
    scanner_stop: false,
    emergency_state: 0}'" output="screen"/> 

    <!-- delay 1s transfer emergency to signal-->
    <include file="$(find turtlebot3_sim_tests)/launch/includes/timed_roslaunch.launch">
        <arg name="time" value="1" />
        <arg name="pkg" value="turtlebot3_sim_tests" />
        <arg name="file" value="emergency_to_signal.launch" />
        <arg name="node_name" value="emergency_to_signal"/>
    </include>

    <!-- robot_has_stopped_node -->
    <node pkg="araig_calculators" type="comp_param_node" name="robot_has_stopped_node" output="screen">
        <remap from="/in_float" to="/data/robot/odom/twist/linear_x"/>
        <remap from="/out_bool" to="/signal/calc/robot_has_stopped"/>
    </node>

    <!-- braking_distance_node -->
    <node pkg="araig_calculators" type="diff_pose_temporal_node" name="braking_distance_node" output="screen">
        <remap from="/in_start" to="/signal/robot/emergency"/>
        <remap from="/in_stop" to="/signal/calc/robot_has_stopped"/>
        <remap from="/in_pose" to="/data/interpreter/location/robot"/>
        <remap from="/out_disp_position" to="/data/calc/braking_distance"/>
    </node>

    <!-- braking_time_node -->
    <node pkg="araig_calculators" type="diff_time_node" name="braking_time_node" output="screen">
        <remap from="/in_start" to="/signal/robot/emergency"/>
        <remap from="/in_stop" to="/signal/calc/robot_has_stopped"/>
        <remap from="/out_duration" to="/data/calc/braking_time"/>
    </node>

    <!-- logging -->
    <!-- folder_bagger_node -->
    <node pkg="araig_calculators" type="rosbagger_node" name="folder_bagger_node" output="screen">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
        <remap from="/test_failed" to="/signal/runner/test_failed"/>
        <remap from="/test_succeeded" to="/signal/runner/test_succeeded"/>
    </node>

    <!-- param_logger_node -->
    <node pkg="araig_calculators" type="rosparam_logger_node" name="param_logger_node" output="log">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
    </node>

    <!-- results_logger_node -->
    <node pkg="araig_calculators" type="results_logger_node" name="results_logger_node" output="log">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
        <remap from="/test_failed" to="/signal/runner/test_failed"/>
        <remap from="/test_succeeded" to="/signal/runner/test_succeeded"/>
    </node>

    <node name="plotter" type="rqt_multiplot" pkg="rqt_multiplot"
        args="--multiplot-config $(find turtlebot3_sim_tests)/config/plotter/speed_plot.xml --multiplot-run-all">
    </node>

</launch>