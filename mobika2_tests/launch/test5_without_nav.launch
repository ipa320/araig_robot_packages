<launch>   
<!-- run rostest 1 -->
    <arg name="disable_marvel" default="false"/>

    <arg name="dest_dir" default="$(env HOME)/ARAIG" />
    <param name="/calculators/dest_dir" value="$(arg dest_dir)" />

    <rosparam command="load" file="$(find mobika2_tests)/config/test5_without_nav.yaml" />

<!-- sensors -->
    <!-- START common.launch SEPARATELY ONCE TO AVOID HAVING TO RESTART EVERY TIME COZ MARVEL SUCKS MAN-->

<!-- test runner -->
    <node pkg="araig_test_runners" type="test_5_without_nav" name="test_5_without_nav" output="screen">
    </node>

<!-- interpreters -->
    <node pkg="araig_interpreters" type="velocity_interpreter" name="velocity_interpreter_node" output="screen">
        <remap from="/start" to="/signal/runner/start_robot"/>
        <remap from="/stop" to="/signal/runner/stop_robot"/>
        <remap from="/velocity" to="/cmd_vel"/>    
    </node>

<!-- calculators -->
    <!-- get speed from /odom -->
    <node name="focus_odom_x" pkg="topic_tools" type="transform" args="/odom /data/robot/odom/twist/linear_x std_msgs/Float64 'm.twist.twist.linear.x'" />
    
    <group if="$(arg disable_marvel)"> 
        <!-- use /odom as the location of robot, mobika ddoes not have amcl-->
        <node name="focus_pose" pkg="topic_tools" type="transform" args="/odom /data/interpreter/location/robot geometry_msgs/PoseStamped 
        'geometry_msgs.msg.PoseStamped(header=std_msgs.msg.Header(seq=m.header.seq,stamp=m.header.stamp),pose=m.pose.pose)' --import geometry_msgs std_msgs" />
    
        <!-- pub fake obstacle_location  -->
        <node pkg="rostopic" type="rostopic" name="obstacle_location_node" args="pub -l /data/interpreter/location/obstacle geometry_msgs/PoseStamped
        '{
            header:{
                frame_id: '/map'
            },
            pose:{  
                position: {
                    x: 0,
                    y: 1,
                    z: 0.0},
                orientation: {
                    x: 0.0,
                    y: 0.0,
                    z: 0.0,
                    w: 1.0}
                    }
            }'"/>
        <!-- static obstacle frame -->
        <node pkg="araig_interpreters" type="pose_tf_broadcaster" name="obstacle_tf2_broadcaster_node" output="screen" />
    </group>

    <group unless ="$(arg disable_marvel)">
        <!-- X Y Z Y P R transform of marvel origin frame wrt map frame. Needs to be physically measured. -->
        <arg name="origin_pos" default="1.52 -2.37 0 0.55 0 0"/>

        <!-- Publish static TF of the origin anchor to map -->
        <node pkg="tf" type="static_transform_publisher" name="marvel_tf" args=" $(arg origin_pos)  /map /marvel_origin 1"/>

        <!-- marvel_interpreter -->
        <node pkg="araig_interpreters" type="marvel_location_interpreter" name="marvel_interpreter" output="screen">
        <remap from="/marvel_interpreter/beacon10" to="/data/interpreter/location/robot"/>
        <remap from="/marvel_interpreter/beacon11" to="/data/interpreter/location/obstacle"/>
        </node>
    </group>

    <!-- robot_has_stopped_node -->
    <node pkg="araig_calculators" type="comp_param_node" name="robot_has_stopped_node" output="screen">
        <remap from="/in_float" to="/data/robot/odom/twist/linear_x"/>
        <remap from="/out_bool" to="/signal/calc/robot_has_stopped"/>
    </node>

    <!-- robot_in_collision_node -->
    <node pkg="araig_calculators" type="comp_poses_node" name="robot_in_collision_node" output="screen">
        <remap from="/in_pose_1" to="/data/interpreter/location/robot"/>
        <remap from="/in_pose_2" to="/data/interpreter/location/obstacle"/>
        <remap from="/out_bool" to="/signal/calc/robot_in_collision"/>
    </node>

    <!-- robot_stop_gap_node -->
    <node pkg="araig_calculators" type="diff_poses_spatial_node" name="robot_stop_gap_node" output="screen">
        <remap from="/in_obj_1" to="/data/interpreter/location/robot"/>
        <remap from="/in_obj_2" to="/data/interpreter/location/obstacle"/>
        <remap from="/in_signal" to="/signal/calc/robot_has_stopped"/>
        <remap from="out_disp_position" to="/data/calc/robot_stop_gap"/>
    </node>

    <!-- logging -->
    <!-- folder_bagger_node -->
    <node pkg="araig_calculators" type="folder_bagger_node" name="folder_bagger_node" output="screen">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
        <remap from="/test_failed" to="/signal/runner/test_failed"/>
        <remap from="/test_succeeded" to="/signal/runner/test_succeeded"/>
        <remap from="/out_begin_write" to="/signal/logger/begin_write"/>
    </node>

    <!-- param_logger_node -->
    <node pkg="araig_calculators" type="rosparam_logger_node" name="param_logger_node" output="log">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
    </node>

    <!-- results_logger_node -->
    <node pkg="araig_calculators" type="results_logger_node" name="results_logger_node" output="log">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
        <remap from="/test_failed" to="/signal/runner/test_failed"/>
        <remap from="/test_succeeded" to="/signal/runner/test_succeeded"/>
    </node>

    <!-- Speed logger -->
    <node pkg="araig_calculators" type="float_series_logger_node" name="robot_speed_logger" output="screen">
        <remap from="/start" to="/signal/ui/start_test"/>
        <remap from="/stop" to="/signal/runner/test_completed"/>
        <remap from="/in_float" to="/data/robot/odom/twist/linear_x"/>
    </node>

    <!-- RQT Multiplotter -->
    <node name="plotter" type="rqt_multiplot" pkg="rqt_multiplot"
        args="--multiplot-config $(find mobika2_tests)/config/plotter/speed_position.xml --multiplot-run-all">
    </node>

</launch>